<?xml version="1.0" encoding="UTF-8"?>
<configuration>

  <!--日志格式应用spring boot默认的格式，也可以自己更改-->
  <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
  <property name="FILE_LOG_PATTERN"
    value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] [%thread] [%X{traceId}] [%logger{50}] [%M] [%line] - %msg%n"/>
  <springProperty scope="context" name="SERVICE_NAME" source="spring.application.name"
    defaultValue="itzhuo"/>

  <!--定义日志存放的位置，默认存放在项目启动的相对路径的目录-->
  <springProperty scope="context" name="LOG_PATH" source="log.path"
    defaultValue="log/${SERVICE_NAME}"/>
  <!-- 全局日志等级 -->
  <springProperty scope="context" name="LOG_LEVEL_ROOT" source="log.level.root"
    defaultValue="INFO"/>
  <!-- 服务自定义等级 如需自定义服务日志等级 修改下方的【自定义服务名】与nacos上的log.level.自定义服务名=等级 -->
  <springProperty scope="context" name="LOG_LEVEL" source="log.level.itzhuo-system"
    defaultValue="${LOG_LEVEL_ROOT}"/>

  <!-- 日志记录器，日期滚动记录，level为 ERROR 日志 -->
  <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">

    <!-- 正在记录的日志文件的路径及文件名 -->
    <file>${LOG_PATH}/log_error.log</file>

    <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

      <!-- 归档的日志文件的路径，%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
      <fileNamePattern>${LOG_PATH}/error/%d{yyyy-MM-dd,aux}/log-error-%d{yyyy-MM-dd}.%i.log
      </fileNamePattern>
      <!--日志最大的历史7天-->
      <maxHistory>7</maxHistory>

      <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，
      命名日志文件，例如log-error-2013-12-21.0.log -->
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>

    <!-- 追加方式记录日志 -->
    <append>true</append>

    <!-- 日志文件的格式 -->
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>utf-8</charset>
    </encoder>

    <!-- 此日志文件只记录error级别的 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>error</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>


  <!-- 日志记录器，日期滚动记录，level为 INFO 日志 -->
  <appender name="FILE_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">

    <!-- 正在记录的日志文件的路径及文件名 -->
    <file>${LOG_PATH}/log_info.log</file>

    <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

      <!-- 归档的日志文件的路径，%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
      <fileNamePattern>${LOG_PATH}/info/%d{yyyy-MM-dd,aux}/log-info-%d{yyyy-MM-dd}.%i.log
      </fileNamePattern>
      <!--日志最大的历史7天-->
      <maxHistory>7</maxHistory>

      <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，
      命名日志文件，例如log-error-2013-12-21.0.log -->
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>

    <!-- 追加方式记录日志 -->
    <append>true</append>

    <!-- 日志文件的格式 -->
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>utf-8</charset>
    </encoder>

    <!-- 此日志文件只记录info级别的 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>info</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>


  <!-- 日志记录器，日期滚动记录，level为 WARN 日志 -->
  <appender name="FILE_WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">

    <!-- 正在记录的日志文件的路径及文件名 -->
    <file>${LOG_PATH}/log_warn.log</file>

    <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

      <!-- 归档的日志文件的路径，%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
      <fileNamePattern>${LOG_PATH}/warn/%d{yyyy-MM-dd,aux}/log-warn-%d{yyyy-MM-dd}.%i.log
      </fileNamePattern>
      <!--日志最大的历史7天-->
      <maxHistory>7</maxHistory>

      <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，
      命名日志文件，例如log-error-2013-12-21.0.log -->
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>

    <!-- 追加方式记录日志 -->
    <append>true</append>

    <!-- 日志文件的格式 -->
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>utf-8</charset>
    </encoder>

    <!-- 此日志文件只记录warn级别的 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>warn</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- 日志记录器，日期滚动记录，level为 DEBUG 日志 -->
  <appender name="FILE_DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">

    <!-- 正在记录的日志文件的路径及文件名 -->
    <file>${LOG_PATH}/log_debug.log</file>

    <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

      <!-- 归档的日志文件的路径，%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
      <fileNamePattern>${LOG_PATH}/debug/%d{yyyy-MM-dd,aux}/log-debug-%d{yyyy-MM-dd}.%i.log
      </fileNamePattern>
      <!--日志最大的历史7天-->
      <maxHistory>7</maxHistory>

      <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，
      命名日志文件，例如log-error-2013-12-21.0.log -->
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>

    <!-- 追加方式记录日志 -->
    <append>true</append>

    <!-- 日志文件的格式 -->
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>utf-8</charset>
    </encoder>

    <!-- 此日志文件只记录debug级别的 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>debug</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>


  <!-- 日志记录器，日期滚动记录，所有日志 -->
  <appender name="FILE_ALL" class="ch.qos.logback.core.rolling.RollingFileAppender">

    <!-- 正在记录的日志文件的路径及文件名 -->
    <file>${LOG_PATH}/log_total.log</file>

    <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

      <!-- 归档的日志文件的路径，%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
      <fileNamePattern>${LOG_PATH}/total/%d{yyyy-MM-dd,aux}/log-total-%d{yyyy-MM-dd}.%i.log
      </fileNamePattern>
      <!--日志最大的历史7天-->
      <maxHistory>7</maxHistory>

      <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，
      命名日志文件，例如log-error-2013-12-21.0.log -->
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>

    <!-- 追加方式记录日志 -->
    <append>true</append>

    <!-- 日志文件的格式 -->
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>utf-8</charset>
    </encoder>
  </appender>


  <!-- 日志记录器，日期滚动记录，level 根据配置动态输出日志 -->
  <appender name="FILE_RELEASE" class="ch.qos.logback.core.rolling.RollingFileAppender">

    <!-- 正在记录的日志文件的路径及文件名 -->
    <file>${LOG_PATH}/log_release.log</file>

    <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

      <!-- 归档的日志文件的路径，%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
      <fileNamePattern>${LOG_PATH}/release/%d{yyyy-MM-dd,aux}/log-warn-%d{yyyy-MM-dd}.%i.log
      </fileNamePattern>
      <!--日志最大的历史7天-->
      <maxHistory>7</maxHistory>

      <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，
      命名日志文件，例如log-error-2013-12-21.0.log -->
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>

    <!-- 追加方式记录日志 -->
    <append>true</append>

    <!-- 日志文件的格式 -->
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>utf-8</charset>
    </encoder>

    <!-- 此日志文件只记录warn级别的 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>${LOG_LEVEL}</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>
  <!-- 异步输出 DEBUG -->
  <appender name="ASYNC_FILE_DEBUG" class="ch.qos.logback.classic.AsyncAppender">
    <discardingThreshold>0</discardingThreshold>
    <queueSize>256</queueSize>
    <appender-ref ref="FILE_DEBUG"/>
  </appender>
  <!-- 异步输出 INFO -->
  <appender name="ASYNC_FILE_INFO" class="ch.qos.logback.classic.AsyncAppender">
    <discardingThreshold>0</discardingThreshold>
    <queueSize>256</queueSize>
    <appender-ref ref="FILE_INFO"/>
  </appender>
  <!-- 异步输出 WARN -->
  <appender name="ASYNC_FILE_WARN" class="ch.qos.logback.classic.AsyncAppender">
    <discardingThreshold>0</discardingThreshold>
    <queueSize>256</queueSize>
    <appender-ref ref="FILE_WARN"/>
  </appender>
  <!-- 异步输出 ERROR -->
  <appender name="ASYNC_FILE_ERROR" class="ch.qos.logback.classic.AsyncAppender">
    <discardingThreshold>0</discardingThreshold>
    <queueSize>256</queueSize>
    <appender-ref ref="FILE_ERROR"/>
  </appender>
  <!-- 异步输出 ALL -->
  <appender name="ASYNC_FILE_ALL" class="ch.qos.logback.classic.AsyncAppender">
    <discardingThreshold>0</discardingThreshold>
    <queueSize>256</queueSize>
    <appender-ref ref="FILE_ALL"/>
  </appender>


  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>${CONSOLE_LOG_PATTERN}</pattern>
      <charset>utf-8</charset>
    </encoder>
  </appender>


  <!-- 异步输出 控制台 -->
  <appender name="ASYNC_STDOUT" class="ch.qos.logback.classic.AsyncAppender">
    <discardingThreshold>0</discardingThreshold>
    <queueSize>256</queueSize>
    <appender-ref ref="STDOUT"/>
  </appender>


  <!--<appender name="LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
      &lt;!&ndash; 必填：目标：LogStash的 IP:Port &ndash;&gt;
      <destination>192.168.0.50:50000</destination>
      &lt;!&ndash; 可选：保持程序存活时间 &ndash;&gt;
      <keepAliveDuration>5 minutes</keepAliveDuration>
      &lt;!&ndash; 可选：重连延迟时长 &ndash;&gt;
      <reconnectionDelay>10 second</reconnectionDelay>
      &lt;!&ndash; 可选：等待策略 &ndash;&gt;
      <waitStrategyType>sleeping</waitStrategyType>
      &lt;!&ndash;  ============ encoder必须配置,有多种可选 ============= &ndash;&gt;
      &lt;!&ndash; 编码器二：LoggingEventCompositeJsonEncoder &ndash;&gt;
      <encoder charset="UTF-8" class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
          <providers>
              &lt;!&ndash; 时间戳：时区 &ndash;&gt;
              <timestamp>
                  <timeZone>UTC</timeZone>
              </timestamp>
              &lt;!&ndash; 模式 &ndash;&gt;
              <pattern>
                  <pattern>
                      {
                      "severity": "%level",
                      "service": "${SERVICE_NAME:-}",
                      "trace": "%X{X-B3-TraceId:-}",
                      "span": "%X{X-B3-SpanId:-}",
                      "exportable": "%X{X-Span-Export:-}",
                      "pid": "${PID:-}",
                      "thread": "%thread",
                      "class": "%logger{40}",
                      "msg": "%message"
                      &lt;!&ndash;"idx_pre": "elk-original-third-access",&ndash;&gt;
                      &lt;!&ndash;"json": "#asJson{%message}"  这个asJson可以把对应的字符串作为json对象取出来，这样es可以对json里面的字段索引了&ndash;&gt;
                      }
                  </pattern>
              </pattern>
          </providers>
      </encoder>
  </appender>-->


  <root level="${LOG_LEVEL}">
    <appender-ref ref="ASYNC_STDOUT"/>
    <appender-ref ref="ASYNC_FILE_ERROR"/>
    <appender-ref ref="ASYNC_FILE_INFO"/>
    <appender-ref ref="ASYNC_FILE_WARN"/>
    <appender-ref ref="ASYNC_FILE_DEBUG"/>
    <appender-ref ref="ASYNC_FILE_ALL"/>
    <!--<appender-ref ref="LOGSTASH"/>-->
  </root>


</configuration>
